// Generated by view binder compiler. Do not edit!
package kr.co.lion.mungnolja_nayeon1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RatingBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.MaterialToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kr.co.lion.mungnolja_nayeon1.R;

public final class FragmentPetSitterReviewBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RatingBar ratingBarPetSitterReview;

  @NonNull
  public final RecyclerView recyclerPetSitterReview;

  @NonNull
  public final TextView textViewPetSitterReviewCount;

  @NonNull
  public final TextView textViewPetSitterReviewScore;

  @NonNull
  public final MaterialToolbar toolbarPetSitterReview;

  private FragmentPetSitterReviewBinding(@NonNull LinearLayout rootView,
      @NonNull RatingBar ratingBarPetSitterReview, @NonNull RecyclerView recyclerPetSitterReview,
      @NonNull TextView textViewPetSitterReviewCount,
      @NonNull TextView textViewPetSitterReviewScore,
      @NonNull MaterialToolbar toolbarPetSitterReview) {
    this.rootView = rootView;
    this.ratingBarPetSitterReview = ratingBarPetSitterReview;
    this.recyclerPetSitterReview = recyclerPetSitterReview;
    this.textViewPetSitterReviewCount = textViewPetSitterReviewCount;
    this.textViewPetSitterReviewScore = textViewPetSitterReviewScore;
    this.toolbarPetSitterReview = toolbarPetSitterReview;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPetSitterReviewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPetSitterReviewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_pet_sitter_review, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPetSitterReviewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ratingBarPetSitterReview;
      RatingBar ratingBarPetSitterReview = ViewBindings.findChildViewById(rootView, id);
      if (ratingBarPetSitterReview == null) {
        break missingId;
      }

      id = R.id.recyclerPetSitterReview;
      RecyclerView recyclerPetSitterReview = ViewBindings.findChildViewById(rootView, id);
      if (recyclerPetSitterReview == null) {
        break missingId;
      }

      id = R.id.textViewPetSitterReviewCount;
      TextView textViewPetSitterReviewCount = ViewBindings.findChildViewById(rootView, id);
      if (textViewPetSitterReviewCount == null) {
        break missingId;
      }

      id = R.id.textViewPetSitterReviewScore;
      TextView textViewPetSitterReviewScore = ViewBindings.findChildViewById(rootView, id);
      if (textViewPetSitterReviewScore == null) {
        break missingId;
      }

      id = R.id.toolbarPetSitterReview;
      MaterialToolbar toolbarPetSitterReview = ViewBindings.findChildViewById(rootView, id);
      if (toolbarPetSitterReview == null) {
        break missingId;
      }

      return new FragmentPetSitterReviewBinding((LinearLayout) rootView, ratingBarPetSitterReview,
          recyclerPetSitterReview, textViewPetSitterReviewCount, textViewPetSitterReviewScore,
          toolbarPetSitterReview);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
